<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN""http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
  <title>Q.contextmenu | QLib | Powered By PHPKIND</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <!-- 使用QLib控件是必须包含样式表 -->
  <link type="text/css" rel="stylesheet" href="../ui.css" />
  <!--  
  提示：src="{QLib目录}/Q.js" 
  根据实际存放路径， 测试代码都是在QLib目录的samples文件夹下，所以这里用的是"../Q.js" 
  -->
    <script type="text/javascript" src="../Q.js">
  <!--
  // 需要加载额外库时
  import ui.contextmenu;

  -->
  </script>

  <script>
  <!--
  
  // 全局菜单实例 class_menu
  var g_menu = null;

  Q.Ready(function() 
  {
    // 初始化菜单
    g_menu = new class_menu();
    
    var m1 = new class_menuitem({
      text: "菜单一",
      callback : function(menuitem) {
        
      }
    });

    var m2 = new class_menuitem({
      text: "菜单二", 
      callback : function(menuitem) {
        
      }
    });

    var m3 = new class_menuitem({type: MENU_SEPERATOR, text: ""});
    var m4 = new class_menuitem({text: "子菜单"});
    g_menu.addMenuItem(m1);
    g_menu.addMenuItem(m2);
    g_menu.addMenuItem(m3);
    g_menu.addMenuItem(m4);

    var m41 = new class_menuitem({
      text: "子菜单一",
      callback : function(menuitem) {
        
      }
    });

    var m42 = new class_menuitem({
      text: "子菜单二asdfasdfasdf", 
      callback : function(menuitem) {
        alert('您点击的是子菜单二！');
      }
    });
    
    m4.addSubMenuItem(m41);
    m4.addSubMenuItem(m42);

    g_menu.hide();

    // 获得"显示菜单"按钮对象
    var oBtnMenu = Q.$('btnMenu');
    // 添加单击事件
    oBtnMenu.onclick = function() {
      g_menu.showElement(this);
    }

  });

  -->
  </script>
</head>
<body>

<button id="btnMenu">显示菜单</button>

</body>
</html>
